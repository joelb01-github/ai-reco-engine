---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Infrastructure to upload CSV into a dynamoDB table. The template deploys the following resources:
  A private S3 bucket configured with an S3 event trigger upon file upload
  A DynamoDB table with on-demand for read/write capacity mode
  A Lambda function with a timeout of 15 minutes, which contains the code to import the CSV data into DynamoDB
  All associated IAM roles needed for the solution, configured according to the principle of least privilege
  "

Parameters:
  ProjectName:
    Type: String
  BranchName:
    Type: String
    Description: "The deployment environment" 
    AllowedValues:
      - "dev"
      - "uat"
      - "master"
  FileName:
    Description: "Name of the S3 file (including suffix)"
    Type: "String"
    Default: "links.csv"
    ConstraintDescription: "Valid S3 file name."
  LambdaBucketName:
    Description: "S3 Bucket name that is holding the lambda code"
    Type: "String"
    ConstraintDescription: "Valid S3 Bucket name."
  LambdaOjectKey:
    Description: "S3 key to the file with the lambda code"
    Type: "String"
    ConstraintDescription: "Valid S3 key."

Resources:
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${ProjectName}-links-${BranchName}"
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: movieId
          AttributeType: N
        - AttributeName: imdbId
          AttributeType: N
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "imdbIndex"
          KeySchema: 
            - AttributeName: imdbId
              KeyType: HASH
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: policyname
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:BatchWriteItem'

  CsvToDDBLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: csv2dbb/lambda/index.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref LambdaOjectKey
      Runtime: python3.7
      Timeout: 900
      MemorySize: 3008
      Environment:
        Variables:
          bucket: !Sub "${ProjectName}-csv2ddb-${BranchName}-AWS::AccountId"
          key: !Ref FileName
          table: !Ref DynamoDBTable
    
  BucketPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref CsvToDDBLambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  S3Bucket:
    DependsOn:
      - BucketPermission
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${ProjectName}-csv2ddb-${BranchName}-${AWS::AccountId}"
      AccessControl: BucketOwnerFullControl
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - CsvToDDBLambdaFunction
              - Arn

Outputs:
  BucketName:
    Description: S3 Bucket name
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${AWS::StackName}:BucketName"

---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Recommender API (MVP version)"

Parameters:
  ProjectName:
    Type: String
  ExecutionId:
    Type: String
    Description: Execution ID of the pipeline
  BranchName:
    Type: String
  ECSTaskCustomRole:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc
  Path:
    Type: String
    Default: "/reco-mvp*"
    Description: A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service.
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to  
  Priority:
    Type: Number
    Default: 2
    Description: The priority for the routing rule added to the load balancer. This only applies if there are multiple services which have been assigned to different paths on the load balancer.
  NetworkingStackName:
    Type: String
    Description: "Name of the CF stack associated with the instrastrure codepipeline step within the be-awsInfra-networking project"
  EcsClusterStackName:
    Type: String
    Description: "Name of the CF stack associated with the instrastrure codepipeline step within the be-awsInfra-ecsCluster project"

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'ECSTaskCustomRole', ''] ]

Mappings:
  BranchName:
    dev:
      ServiceDesiredCount: 1
      TaskCpuUnits: 256
      TaskReservedMemory: 512
    uat:
      ServiceDesiredCount: 1
      TaskCpuUnits: 256
      TaskReservedMemory: 512
    prod:
      ServiceDesiredCount: 1
      TaskCpuUnits: 256
      TaskReservedMemory: 512

Resources:
  ECSService:
    DependsOn:
      - HTTPSLoadBalancerRule
      - HTTPLoadBalancerRule
    Type: AWS::ECS::Service
    # Added for bug on AwsvpcConfiguration requiring it to be AwsVpcConfiguration. Once fixed by aws, can take this away
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - E3002
    Properties:
      Cluster: 
        Fn::ImportValue:
          !Sub "${EcsClusterStackName}-${BranchName}:ECSClusterName"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !FindInMap [
        BranchName,
        !Ref BranchName,
        ServiceDesiredCount
      ]
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub "${ProjectName}-${BranchName}"
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${EcsClusterStackName}-${BranchName}:FargateContainerSecurityGroup"
          Subnets:
            - Fn::ImportValue:
                !Sub "${NetworkingStackName}:PublicSubnetOne"
            - Fn::ImportValue:
                !Sub "${NetworkingStackName}:PublicSubnetTwo"
      ServiceName: !Sub "${ProjectName}-${BranchName}"
      TaskDefinition: !Ref ECSTaskDefinition

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-${BranchName}"
      Cpu: !FindInMap [
        BranchName,
        !Ref BranchName,
        TaskCpuUnits
      ]
      Memory: !FindInMap [
        BranchName,
        !Ref BranchName,
        TaskReservedMemory
      ]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: 
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'ECSTaskCustomRole'
          - !Ref "AWS::NoValue"
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub "${EcsClusterStackName}-${BranchName}:ECSTaskExecutionRole"
      ContainerDefinitions:
        - Name: !Sub "${ProjectName}-${BranchName}"
          Image: !Sub 
            - "${AccountId}.dkr.ecr.${Region}.amazonaws.com/${ECRRepositoryName}:${ExecutionId}"
            - AccountId: !Ref "AWS::AccountId"
              Region: !Ref AWS::Region
              ECRRepositoryName:
                Fn::ImportValue:
                  !Sub "${EcsClusterStackName}-${BranchName}:ECRRepositoryName"
              ExecutionId: !Ref ExecutionId
          Environment:
            - Name: DEV_ENV
              Value: !Ref BranchName
            - Name: FLASK_APP
              Value: "app.py"
            - Name: FLASK_ENV
              Value: "production"
            - Name: LOGGING_LEVEL
              Value: "INFO"
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'task-1'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${ProjectName}-${BranchName}
      RetentionInDays: 7

  # Used for keeping track of all the tasks, and what IP addresses / port numbers they have. Most often this target group is just connected to an application load balancer, so it can automatically distribute traffic across all the targets.
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: HTTP
      Port: !Ref 'ContainerPort'
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /reco-mvp
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      VpcId: 
        Fn::ImportValue:
          !Sub "${NetworkingStackName}:VPCId"

  # Create a rule on the load balancer for routing traffic to the target group
  HTTPSLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'LoadBalancerTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
           - !Ref 'Path'
      ListenerArn: 
        Fn::ImportValue:
          !Sub "${EcsClusterStackName}-${BranchName}:PublicLoadBalancerHTTPSListener"
      Priority: !Ref 'Priority'

  # Create a rule on the load balancer for routing traffic to the target group
  HTTPLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'LoadBalancerTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
           - !Ref 'Path'
      ListenerArn: 
        Fn::ImportValue:
          !Sub "${EcsClusterStackName}-${BranchName}:PublicLoadBalancerHTTPListener"
      Priority: !Ref 'Priority'
